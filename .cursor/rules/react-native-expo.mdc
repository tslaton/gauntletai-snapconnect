---
description: Best practices for React Native development using Expo SDK and TypeScript
globs: **/*.{ts,tsx}, **/app.json, **/app.config.{js,ts}, **/assets/**/*
---

# React Native Expo

```
// Description: Best practices for React Native development using Expo SDK and TypeScript
// Recommended Globs: **/*.{ts,tsx}, **/app.json, **/app.config.{js,ts}, **/assets/**/*
```

## Project Structure
```
project_name/
├── assets/
│   ├── fonts/
│   └── images/
├── src/
│   ├── app/
│   │   ├── _layout.tsx
│   │   └── index.tsx
│   ├── components/
│   │   ├── common/
│   │   └── screens/
│   ├── screens/
│   │   ├── auth/
│   │   └── main/
│   ├── hooks/
│   │   ├── useAuth.ts
│   │   └── useTheme.ts
│   └── utils/
│       ├── api.ts
│       └── storage.ts
├── app.json
├── app.config.ts
└── tsconfig.json
```

## Component Structure
```typescript
import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { useTheme } from '../hooks/useTheme';

export function ThemeSwitcher() {
  const { theme, toggleTheme } = useTheme();

  return (
    <View className="flex-1 items-center justify-center bg-white dark:bg-black">
      <Text className="text-2xl font-bold text-black dark:text-white mb-4">
        Current Theme: {theme}
      </Text>
      <TouchableOpacity
        onPress={toggleTheme}
        className="px-6 py-3 bg-blue-500 rounded-lg"
      >
        <Text className="text-white font-semibold">Toggle Theme</Text>
      </TouchableOpacity>
    </View>
  );
};
```

## State management
```typescript
// src/stores/theme.ts
/**
 * @file This file contains the Zustand store for managing user profile data.
 * It handles fetching, updating, and holding the state for the user's public profile.
 */

import { Session } from '@supabase/supabase-js';
import { create } from 'zustand';
import { supabase } from '../utils/supabase';

/**
 * Interface for the Profile store state and its actions.
 */
interface ProfileState {
  isLoading: boolean;
  error: string | null;
  username: string | null;
  website: string | null;
  avatarUrl: string | null;
  setUsername: (username: string) => void;
  setWebsite: (website: string) => void;
  clearError: () => void;
  fetchProfile: (session: Session) => Promise<void>;
  updateProfile: (session: Session) => Promise<void>;
}

/**
 * A Zustand store for managing the user's profile.
 *
 * @returns A store with state and actions for profile management.
 */
export const useProfileStore = create<ProfileState>((set, get) => ({
  // Initial state
  isLoading: false,
  error: null,
  username: null,
  website: null,
  avatarUrl: null,

  // --- ACTIONS ---

  /**
   * Sets the username in the store.
   * @param {string} username - The new username.
   */
  setUsername: (username) => set({ username }),

  /**
   * Sets the website URL in the store.
   * @param {string} website - The new website URL.
   */
  setWebsite: (website) => set({ website }),

  /**
   * Clears any existing error message from the state.
   */
  clearError: () => set({ error: null }),

  /**
   * Fetches the user's profile from the database and updates the store.
   * @param {Session} session - The user's current session object.
   */
  fetchProfile: async (session) => {
    set({ isLoading: true, error: null });
    try {
      const { user } = session;
      if (!user) throw new Error('No user on the session!');

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user.id)
        .single();

      if (error && status !== 406) {
        throw error;
      }

      if (data) {
        // Batch state updates to avoid multiple re-renders
        set({
          username: data.username,
          website: data.website,
          avatarUrl: data.avatar_url,
        });
      }
    } catch (error) {
      const message =
        error instanceof Error ? error.message : 'An unknown error occurred.';
      set({ error: message });
    } finally {
      set({ isLoading: false });
    }
  },

  /**
   * Updates the user's profile in the database using the current store state.
   * @param {Session} session - The user's current session object.
   */
  updateProfile: async (session) => {
    set({ isLoading: true, error: null });
    try {
      const { user } = session;
      if (!user) throw new Error('No user on the session!');

      // Get current state from the store for the update
      const { username, website, avatarUrl } = get();

      const updates = {
        id: user.id,
        username,
        website,
        avatar_url: avatarUrl,
        updated_at: new Date(),
      };

      const { error } = await supabase.from('profiles').upsert(updates);

      if (error) {
        throw error;
      }
    } catch (error) {
      const message =
        error instanceof Error ? error.message : 'An unknown error occurred.';
      set({ error: message });
    } finally {
      set({ isLoading: false });
    }
  },
}));
```


## Custom Hooks
```typescript
// src/hooks/useAuth.ts
import { useSecureStore } from './useSecureStore';

interface AuthState {
  token: string | null;
  user: User | null;
}

export const useAuth = () => {
  const [state, setState] = useState<AuthState>({
    token: null,
    user: null,
  });

  const { getItem, setItem } = useSecureStore();

  const login = async (credentials: Credentials) => {
    try {
      const response = await api.auth.login(credentials);
      await setItem('token', response.token);
      setState({ token: response.token, user: response.user });
    } catch (error) {
      throw new Error('Login failed');
    }
  };

  return { ...state, login };
};
```

## Asset Management
```typescript
// app.config.ts
import { ExpoConfig } from '@expo/config';

const config: ExpoConfig = {
  name: 'MyApp',
  version: '1.0.0',
  extra: {
    apiUrl: process.env.API_URL,
  },
  splash: {
    image: './assets/splash.png',
    resizeMode: 'contain',
    backgroundColor: '#ffffff',
  },
  updates: {
    fallbackToCacheTimeout: 0,
    url: 'https://u.expo.dev/your-project-id',
  },
  assetBundlePatterns: [
    'assets/images/*',
    'assets/fonts/*',
  ],
};

export default config;
```

## Error Handling
```typescript
// src/utils/error-boundary.tsx
import * as Sentry from 'sentry-expo';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback: React.ReactNode;
}

export class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  { hasError: boolean }
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: React.ErrorInfo) {
    Sentry.Native.captureException(error);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }

    return this.props.children;
  }
}
```

## Push Notifications
```typescript
// src/utils/notifications.ts
import * as Notifications from 'expo-notifications';

export const registerForPushNotifications = async () => {
  const { status } = await Notifications.requestPermissionsAsync();
  if (status !== 'granted') {
    return;
  }

  const token = await Notifications.getExpoPushTokenAsync({
    projectId: 'your-project-id',
  });

  return token;
};

export const configurePushNotifications = () => {
  Notifications.setNotificationHandler({
    handleNotification: async () => ({
      shouldShowAlert: true,
      shouldPlaySound: true,
      shouldSetBadge: true,
    }),
  });
};
```

## Best Practices

### Component Design
- Use functional components with hooks
- Keep components small and focused
- Implement proper prop types with TypeScript
- Use memo for performance optimization

### State Management
- Use Context for global state
- Implement proper data fetching patterns
- Handle loading and error states
- Use proper form state management

### Performance
- Implement proper list rendering
- Use proper image optimization
- Implement proper memory management
- Handle offline support

### Security
- Use Expo's secure store for sensitive data
- Implement proper authentication flow
- Handle proper data encryption
- Implement proper session management

## Resources
- [Expo Documentation](https://docs.expo.dev)
- [React Navigation](https://reactnavigation.org)
- [Expo Vector Icons](https://icons.expo.fyi)
- [Sentry Expo](https://docs.expo.dev/guides/using-sentry)